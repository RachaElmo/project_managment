{"ast":null,"code":"// import React from 'react';\n// import apiClient from '../services/api';\n// //import ExpensesForm from './ExpensesForm';\n// import { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n// //import PieChartComponent from './ChartJS';\n// import { Pagination } from 'react-bootstrap';\n// // import Categories from './Categories';\n// class Expense extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             expenses: [],\n//             data: [],\n//             sort: (a, b) => a.id > b.id ? 1 : -1,\n//             filter: [],\n//             fromDate: '',\n//             toDate: ''\n//         };\n//     }\n//     fetchExpenses() {\n//         if (this.props.loggedIn) {\n//             apiClient.get('sanctum/csrf-cookie').then(() => apiClient.get('/api/expenses')\n//                 .then(response => {\n//                     const expenses = response.data.data;\n//                     this.setState({ expenses: expenses, filter: expenses });\n//                 })\n//                 .catch(error => console.error(error)\n//                 ))\n//         }\n//     }\n//     componentDidMount = (props) => {\n//         this.fetchExpenses();\n//         this.getChart();\n//         this.setState({ filter: this.state.expenses })\n//     }\n//     handleAddExpense = () => {\n//         this.fetchExpenses();\n//         this.getChart();\n//     }\n//     handleDeleteExpense = (id) => {\n//         apiClient.get('/sanctum/csrf-cookie')\n//             .then(response => {\n//                 apiClient.post('/api/deleteExpense', {\n//                     id: id\n//                 }\n//                 )\n//                 const expenses = this.state.expenses.filter(item => item.id !== id);\n//                 const filter = this.state.filter.filter(item => item.id !== id);\n//                 this.setState({ expenses: expenses, filter: filter });\n//             });\n//         this.getChart();\n//     }\n//     getChart = () => {\n//         if (this.props.loggedIn) {\n//             apiClient.get('sanctum/csrf-cookie').then(() => apiClient.get('/api/chartData')\n//                 .then(response => {\n//                     const data = response.data;\n//                     this.setState({ data: data });\n//                 })\n//                 .catch(error => console.error(error)\n//                 ))\n//         }\n//     }\n//     handleAmountSort = () => {\n//         if (this.state.sort == '(a, b) => a.amount > b.amount ? 1 : -1') {\n//             this.setState({ sort: (a, b) => a.amount > b.amount ? -1 : 1 });\n//         }\n//         else { this.setState({ sort: (a, b) => a.amount > b.amount ? 1 : -1 }); }\n//     }\n//     handleDateSort = () => {\n//         if (this.state.sort == '(a, b) => a.date > b.date ? 1 : -1') {\n//             this.setState({ sort: (a, b) => a.date > b.date ? -1 : 1 })\n//         }\n//         else { this.setState({ sort: (a, b) => a.date > b.date ? 1 : -1 }) }\n//     }\n//     filterCatId = categories => {\n//         let expenses = this.state.expenses\n//         if (categories == 0) { expenses = this.state.expenses } else {\n//             expenses = this.state.expenses.filter(item => item.category_id == categories);\n//         } this.setState({ filter: expenses })\n//     }\n//     changeFrom = (e) => {\n//         const from = e.target.value;\n//         this.setState({ fromDate: from })\n//     }\n//     changeTo = (e) => {\n//         const to = e.target.value;\n//         this.setState({ toDate: to })\n//     }\n//     changeDate = () => {\n//         if (this.state.fromDate && this.state.toDate) {\n//             const expenses = this.state.expenses.filter(item => item.date >= this.state.fromDate && item.date <= this.state.toDate);\n//             this.setState({ filter: expenses });\n//         }\n//     }\n//     resetExpenses = () => {\n//         this.setState({ filter: this.state.expenses });\n//         this.setState({ fromDate: '' });\n//         this.setState({ toDate: '' })\n//     }\n//     render() {\n//         if (this.props.loggedIn) {\n//             return (\n//                 <>\n//                     {/* <ExpensesForm onAddExpense={this.handleAddExpense} /> */}\n//                     <div className=\"shadow p-3 mb-5 bg-light rounded split left\" >\n//                         <h3>Filter By:</h3>\n//                         <table>\n//                             <thead>\n//                                 <tr align='center'>\n//                                     <th>Category</th>\n//                                     <th>From Date</th>\n//                                     <th>To Date</th>\n//                                 </tr></thead>\n//                             <tbody>\n//                                 <tr>\n//                                     {/* <td text-align=\"center\"><Categories onChangeCatId={this.filterCatId} {...this.props} loggedIn={true} /></td> */}\n//                                     <td><input className=\"form-control\" type=\"date\" onChange={this.changeFrom} value={this.state.fromDate}></input></td>\n//                                     <td><input className=\"form-control\" type=\"date\" onChange={this.changeTo} value={this.state.toDate}></input></td>\n//                                     <td><button className=\"btn btn-dark\" type=\"submit\" onClick={this.changeDate}>Filter</button></td>\n//                                     <td><button className=\"btn btn-dark\" type=\"submit\" onClick={this.resetExpenses}>Reset</button></td>\n//                                 </tr></tbody></table>\n//                         <div className=\"scroll\">\n//                             <table className=\"table table-striped tableLeft\">\n//                                 <thead className='thead-dark'>\n//                                     <tr>\n//                                         <th>#</th>\n//                                         <th onClick={this.handleAmountSort}>Amount</th>\n//                                         <th>Category</th>\n//                                         <th onClick={this.handleDateSort}>Date</th>\n//                                         <th>Action</th>\n//                                     </tr>\n//                                 </thead>\n//                                 <tbody className=\"\">\n//                                     {this.state.filter.sort(this.state.sort).map((expense) => {\n//                                         return (\n//                                             <tr key={expense.id}>\n//                                                 <td>{expense.id}</td>\n//                                                 <td >{expense.amount} $</td>\n//                                                 <td >{expense.category.name}</td>\n//                                                 <td >{expense.date}</td>\n//                                                 <td><Link to={{ pathname: `/editExpense`, state: { eid: expense.id } }}>\n//                                                     <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" class=\"bi bi-pencil-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n//                                                         <path fill-rule=\"evenodd\" d=\"M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z\" />\n//                                                     </svg></Link><span> â€ƒ  </span>\n//                                                     <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" onClick={(e) => { this.handleDeleteExpense(expense.id) }}>\n//                                                         <path fillRule=\"evenodd\" d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7z\" />\n//                                                     </svg>\n//                                                 </td>\n//                                             </tr>);\n//                                     })}\n//                                 </tbody></table></div>\n//                     </div>\n//                     {/* <div className=\"shadow p-3 mb-5 bg-gradient-light rounded split right\" height=\"100%\">\n//                         <PieChartComponent dataParentToChild={this.state.data} /></div> */}\n//                         </>\n//             );\n//         }\n//         return (\n//             <div className=\"alert alert-warning\">You are not logged in.</div>\n//         );\n//     }\n// }\n// export default Expense;","map":{"version":3,"sources":["/home/ali/project_managment/Frontend/src/components/Expense.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA","sourcesContent":["// import React from 'react';\n// import apiClient from '../services/api';\n\n// //import ExpensesForm from './ExpensesForm';\n\n// import { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\n// //import PieChartComponent from './ChartJS';\n// import { Pagination } from 'react-bootstrap';\n// // import Categories from './Categories';\n\n// class Expense extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             expenses: [],\n//             data: [],\n//             sort: (a, b) => a.id > b.id ? 1 : -1,\n//             filter: [],\n//             fromDate: '',\n//             toDate: ''\n\n//         };\n\n\n\n//     }\n//     fetchExpenses() {\n//         if (this.props.loggedIn) {\n//             apiClient.get('sanctum/csrf-cookie').then(() => apiClient.get('/api/expenses')\n//                 .then(response => {\n//                     const expenses = response.data.data;\n//                     this.setState({ expenses: expenses, filter: expenses });\n//                 })\n//                 .catch(error => console.error(error)\n//                 ))\n\n//         }\n//     }\n//     componentDidMount = (props) => {\n//         this.fetchExpenses();\n//         this.getChart();\n//         this.setState({ filter: this.state.expenses })\n\n//     }\n\n//     handleAddExpense = () => {\n\n//         this.fetchExpenses();\n\n\n//         this.getChart();\n//     }\n//     handleDeleteExpense = (id) => {\n//         apiClient.get('/sanctum/csrf-cookie')\n//             .then(response => {\n//                 apiClient.post('/api/deleteExpense', {\n//                     id: id\n//                 }\n\n\n//                 )\n//                 const expenses = this.state.expenses.filter(item => item.id !== id);\n//                 const filter = this.state.filter.filter(item => item.id !== id);\n//                 this.setState({ expenses: expenses, filter: filter });\n//             });\n//         this.getChart();\n\n\n//     }\n\n\n//     getChart = () => {\n//         if (this.props.loggedIn) {\n//             apiClient.get('sanctum/csrf-cookie').then(() => apiClient.get('/api/chartData')\n//                 .then(response => {\n//                     const data = response.data;\n//                     this.setState({ data: data });\n//                 })\n//                 .catch(error => console.error(error)\n//                 ))\n\n//         }\n//     }\n//     handleAmountSort = () => {\n//         if (this.state.sort == '(a, b) => a.amount > b.amount ? 1 : -1') {\n//             this.setState({ sort: (a, b) => a.amount > b.amount ? -1 : 1 });\n\n//         }\n//         else { this.setState({ sort: (a, b) => a.amount > b.amount ? 1 : -1 }); }\n//     }\n//     handleDateSort = () => {\n//         if (this.state.sort == '(a, b) => a.date > b.date ? 1 : -1') {\n//             this.setState({ sort: (a, b) => a.date > b.date ? -1 : 1 })\n//         }\n//         else { this.setState({ sort: (a, b) => a.date > b.date ? 1 : -1 }) }\n//     }\n\n//     filterCatId = categories => {\n//         let expenses = this.state.expenses\n//         if (categories == 0) { expenses = this.state.expenses } else {\n\n//             expenses = this.state.expenses.filter(item => item.category_id == categories);\n\n\n//         } this.setState({ filter: expenses })\n//     }\n\n//     changeFrom = (e) => {\n//         const from = e.target.value;\n//         this.setState({ fromDate: from })\n\n\n//     }\n//     changeTo = (e) => {\n//         const to = e.target.value;\n//         this.setState({ toDate: to })\n\n//     }\n\n//     changeDate = () => {\n\n//         if (this.state.fromDate && this.state.toDate) {\n//             const expenses = this.state.expenses.filter(item => item.date >= this.state.fromDate && item.date <= this.state.toDate);\n//             this.setState({ filter: expenses });\n\n//         }\n//     }\n\n//     resetExpenses = () => {\n\n//         this.setState({ filter: this.state.expenses });\n//         this.setState({ fromDate: '' });\n//         this.setState({ toDate: '' })\n\n//     }\n\n//     render() {\n\n\n//         if (this.props.loggedIn) {\n//             return (\n//                 <>\n\n//                     {/* <ExpensesForm onAddExpense={this.handleAddExpense} /> */}\n\n\n\n\n//                     <div className=\"shadow p-3 mb-5 bg-light rounded split left\" >\n\n//                         <h3>Filter By:</h3>\n//                         <table>\n//                             <thead>\n//                                 <tr align='center'>\n//                                     <th>Category</th>\n//                                     <th>From Date</th>\n//                                     <th>To Date</th>\n//                                 </tr></thead>\n//                             <tbody>\n//                                 <tr>\n//                                     {/* <td text-align=\"center\"><Categories onChangeCatId={this.filterCatId} {...this.props} loggedIn={true} /></td> */}\n//                                     <td><input className=\"form-control\" type=\"date\" onChange={this.changeFrom} value={this.state.fromDate}></input></td>\n\n//                                     <td><input className=\"form-control\" type=\"date\" onChange={this.changeTo} value={this.state.toDate}></input></td>\n//                                     <td><button className=\"btn btn-dark\" type=\"submit\" onClick={this.changeDate}>Filter</button></td>\n//                                     <td><button className=\"btn btn-dark\" type=\"submit\" onClick={this.resetExpenses}>Reset</button></td>\n//                                 </tr></tbody></table>\n\n//                         <div className=\"scroll\">\n//                             <table className=\"table table-striped tableLeft\">\n//                                 <thead className='thead-dark'>\n//                                     <tr>\n//                                         <th>#</th>\n\n//                                         <th onClick={this.handleAmountSort}>Amount</th>\n//                                         <th>Category</th>\n//                                         <th onClick={this.handleDateSort}>Date</th>\n//                                         <th>Action</th>\n//                                     </tr>\n//                                 </thead>\n//                                 <tbody className=\"\">\n//                                     {this.state.filter.sort(this.state.sort).map((expense) => {\n//                                         return (\n//                                             <tr key={expense.id}>\n//                                                 <td>{expense.id}</td>\n//                                                 <td >{expense.amount} $</td>\n//                                                 <td >{expense.category.name}</td>\n//                                                 <td >{expense.date}</td>\n\n//                                                 <td><Link to={{ pathname: `/editExpense`, state: { eid: expense.id } }}>\n//                                                     <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" class=\"bi bi-pencil-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n//                                                         <path fill-rule=\"evenodd\" d=\"M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z\" />\n//                                                     </svg></Link><span> â€ƒ  </span>\n//                                                     <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" onClick={(e) => { this.handleDeleteExpense(expense.id) }}>\n//                                                         <path fillRule=\"evenodd\" d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7z\" />\n//                                                     </svg>\n\n//                                                 </td>\n//                                             </tr>);\n//                                     })}\n//                                 </tbody></table></div>\n\n//                     </div>\n\n//                     {/* <div className=\"shadow p-3 mb-5 bg-gradient-light rounded split right\" height=\"100%\">\n\n//                         <PieChartComponent dataParentToChild={this.state.data} /></div> */}\n//                         </>\n\n\n\n//             );\n//         }\n//         return (\n//             <div className=\"alert alert-warning\">You are not logged in.</div>\n//         );\n\n//     }\n\n// }\n\n// export default Expense;"]},"metadata":{},"sourceType":"module"}