{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport React from 'react';\nimport apiClient from '../services/api';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Task from './Task';\nexport default class Project extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      milestones: [],\n      tasks: []\n    };\n  }\n\n  fetchMilestones() {\n    if (sessionStorage.getItem('loggedIn')) {\n      apiClient.get('sanctum/csrf-cookie').then(() => apiClient.post('/api/milestones', {\n        projectID: this.props.id\n      }).then(response => {\n        const milestones = response.data;\n        this.setState({\n          milestones: milestones\n        });\n      }).catch(error => console.error(error)));\n    }\n  }\n\n  fetchTasks() {\n    if (sessionStorage.getItem('loggedIn')) {\n      apiClient.get('sanctum/csrf-cookie').then(() => apiClient.post('/api/tasks', {\n        milestoneID: this.props.id\n      }).then(response => {\n        const tasks = response.data;\n        this.setState({\n          tasks: tasks\n        });\n      }).catch(error => console.error(error)));\n    }\n  }\n\n  componentDidMount() {\n    console.log(this.props.id);\n    this.fetchMilestones();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["/home/ali/project_managment/Frontend/src/components/Task.js"],"names":["React","apiClient","BrowserRouter","Router","Route","Link","Task","Project","Component","constructor","props","state","milestones","tasks","fetchMilestones","sessionStorage","getItem","get","then","post","projectID","id","response","data","setState","catch","error","console","fetchTasks","milestoneID","componentDidMount","log","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,IAAzC,QAAqD,kBAArD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,eAAe,MAAMC,OAAN,SAAsBP,KAAK,CAACQ,SAA5B,CAAsC;AACjDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAC,EADF;AAETC,MAAAA,KAAK,EAAC;AAFG,KAAb;AAIH;;AAEDC,EAAAA,eAAe,GAAG;AACN,QAAIC,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAJ,EAAwC;AACpCf,MAAAA,SAAS,CAACgB,GAAV,CAAc,qBAAd,EAAqCC,IAArC,CAA0C,MAAMjB,SAAS,CAACkB,IAAV,CAAe,iBAAf,EAAiC;AAACC,QAAAA,SAAS,EAAC,KAAKV,KAAL,CAAWW;AAAtB,OAAjC,EAC3CH,IAD2C,CACtCI,QAAQ,IAAI;AACd,cAAMV,UAAU,GAAGU,QAAQ,CAACC,IAA5B;AACA,aAAKC,QAAL,CAAc;AAAEZ,UAAAA,UAAU,EAAEA;AAAd,SAAd;AAEH,OAL2C,EAM3Ca,KAN2C,CAMrCC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAN4B,CAAhD;AASH;AACJ;;AAEDE,EAAAA,UAAU,GAAG;AACT,QAAIb,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAJ,EAAwC;AACpCf,MAAAA,SAAS,CAACgB,GAAV,CAAc,qBAAd,EAAqCC,IAArC,CAA0C,MAAMjB,SAAS,CAACkB,IAAV,CAAe,YAAf,EAA4B;AAACU,QAAAA,WAAW,EAAC,KAAKnB,KAAL,CAAWW;AAAxB,OAA5B,EAC3CH,IAD2C,CACtCI,QAAQ,IAAI;AACd,cAAMT,KAAK,GAAGS,QAAQ,CAACC,IAAvB;AACA,aAAKC,QAAL,CAAc;AAAEX,UAAAA,KAAK,EAAEA;AAAT,SAAd;AAEH,OAL2C,EAM3CY,KAN2C,CAMrCC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAN4B,CAAhD;AASH;AACJ;;AAEDI,EAAAA,iBAAiB,GAAE;AACfH,IAAAA,OAAO,CAACI,GAAR,CAAY,KAAKrB,KAAL,CAAWW,EAAvB;AACA,SAAKP,eAAL;AAEH;;AAGTkB,EAAAA,MAAM,GAAE;AAEJ,wBACR,qCADQ;AAUH;;AAxDgD","sourcesContent":["import React from 'react';\nimport apiClient from '../services/api';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Task from './Task';\n\nexport default class Project extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            milestones:[],\n            tasks:[],\n        };\n    }\n\n    fetchMilestones() {\n                if (sessionStorage.getItem('loggedIn')) {\n                    apiClient.get('sanctum/csrf-cookie').then(() => apiClient.post('/api/milestones',{projectID:this.props.id})\n                        .then(response => {\n                            const milestones = response.data;\n                            this.setState({ milestones: milestones });\n                            \n                        })\n                        .catch(error => console.error(error)\n                        ))\n        \n                }\n            }\n\n            fetchTasks() {\n                if (sessionStorage.getItem('loggedIn')) {\n                    apiClient.get('sanctum/csrf-cookie').then(() => apiClient.post('/api/tasks',{milestoneID:this.props.id})\n                        .then(response => {\n                            const tasks = response.data;\n                            this.setState({ tasks: tasks });\n                            \n                        })\n                        .catch(error => console.error(error)\n                        ))\n        \n                }\n            }\n\n            componentDidMount(){\n                console.log(this.props.id);\n                this.fetchMilestones();\n                \n            }\n\n\n    render(){\n      \n        return(\n<>\n\n\n\n</>\n\n\n\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}